# PySNMP SMI module. Autogenerated from smidump -f python SQUID-MIB
# by libsmi2pysnmp-0.1.3 at Thu Apr 13 22:22:14 2017,
# Python version sys.version_info(major=2, minor=7, micro=6, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( Bits, Counter32, Gauge32, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, TimeTicks, Unsigned32, enterprises, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Gauge32", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "TimeTicks", "Unsigned32", "enterprises")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

nlanr = MibIdentifier((1, 3, 6, 1, 4, 1, 3495))
squid = ModuleIdentity((1, 3, 6, 1, 4, 1, 3495, 1)).setRevisions(("1999-01-01 00:00","1998-09-22 00:00","1998-09-22 00:00",))
if mibBuilder.loadTexts: squid.setOrganization("National Laboratory for Applied Network Research")
if mibBuilder.loadTexts: squid.setContactInfo("        Squid Developers\n\nE-mail: squid@squid-cache.org")
if mibBuilder.loadTexts: squid.setDescription("Squid MIB defined for the management of the Squid\nproxy server. See http://www.squid-cache.org/.")
cacheSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 3495, 1, 1))
cacheSysVMsize = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSysVMsize.setDescription(" Storage Mem size in KB ")
cacheSysStorage = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSysStorage.setDescription(" Storage Swap size in KB ")
cacheUptime = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheUptime.setDescription(" The Uptime of the cache in timeticks ")
cacheConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3495, 1, 2))
cacheAdmin = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheAdmin.setDescription(" Cache Administrator E-Mail address ")
cacheSoftware = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSoftware.setDescription(" Cache Software Name ")
cacheVersionId = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 2, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheVersionId.setDescription(" Cache Software Version ")
cacheLoggingFacility = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacheLoggingFacility.setDescription(" Logging Facility. An informational string\nindicating logging info like debug level,\nlocal/syslog/remote logging etc ")
cacheStorageConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3495, 1, 2, 5))
cacheMemMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMemMaxSize.setDescription(" The value of the cache_mem parameter in MB ")
cacheSwapMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 2, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSwapMaxSize.setDescription(" The total of the cache_dir space allocated in MB ")
cacheSwapHighWM = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 2, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSwapHighWM.setDescription(" Cache Swap High Water Mark ")
cacheSwapLowWM = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 2, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSwapLowWM.setDescription(" Cache Swap Low Water Mark ")
cachePerf = MibIdentifier((1, 3, 6, 1, 4, 1, 3495, 1, 3))
cacheSysPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 3495, 1, 3, 1))
cacheSysPageFaults = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSysPageFaults.setDescription(" Page faults with physical i/o ")
cacheSysNumReads = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 1, 2), Counter32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cacheSysNumReads.setDescription(" HTTP I/O number of reads ")
cacheMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMemUsage.setDescription(" Total memory accounted for KB ")
cacheCpuTime = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCpuTime.setDescription(" Amount of cpu seconds consumed ")
cacheCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCpuUsage.setDescription(" The percentage use of the CPU ")
cacheMaxResSize = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMaxResSize.setDescription(" Maximum Resident Size in KB ")
cacheNumObjCount = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheNumObjCount.setDescription(" Number of objects stored by the cache ")
cacheCurrentLRUExpiration = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCurrentLRUExpiration.setDescription(" Storage LRU Expiration Age ")
cacheCurrentUnlinkRequests = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCurrentUnlinkRequests.setDescription(" Requests given to unlinkd ")
cacheCurrentUnusedFDescrCnt = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCurrentUnusedFDescrCnt.setDescription(" Available number of file descriptors ")
cacheCurrentResFileDescrCnt = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCurrentResFileDescrCnt.setDescription(" Reserved number of file descriptors ")
cacheProtoStats = MibIdentifier((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2))
cacheProtoAggregateStats = MibIdentifier((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1))
cacheProtoClientHttpRequests = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheProtoClientHttpRequests.setDescription(" Number of HTTP requests received ")
cacheHttpHits = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHttpHits.setDescription(" Number of HTTP Hits ")
cacheHttpErrors = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHttpErrors.setDescription(" Number of HTTP Errors ")
cacheHttpInKb = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHttpInKb.setDescription(" Number of HTTP KB's recieved ")
cacheHttpOutKb = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHttpOutKb.setDescription(" Number of HTTP KB's transmitted ")
cacheIcpPktsSent = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheIcpPktsSent.setDescription(" Number of ICP messages sent ")
cacheIcpPktsRecv = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheIcpPktsRecv.setDescription(" Number of ICP messages received ")
cacheIcpKbSent = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheIcpKbSent.setDescription(" Number of ICP KB's transmitted ")
cacheIcpKbRecv = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheIcpKbRecv.setDescription(" Number of ICP KB's recieved ")
cacheServerRequests = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheServerRequests.setDescription(" All requests from the client for the cache server ")
cacheServerErrors = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheServerErrors.setDescription(" All errors for the cache server from client requests ")
cacheServerInKb = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheServerInKb.setDescription(" KB's of traffic recieved from servers ")
cacheServerOutKb = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheServerOutKb.setDescription(" KB's of traffic sent to servers ")
cacheCurrentSwapSize = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCurrentSwapSize.setDescription(" Storage Swap size ")
cacheClients = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClients.setDescription(" Number of clients accessing cache ")
cacheMedianSvcTable = MibTable((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 2))
if mibBuilder.loadTexts: cacheMedianSvcTable.setDescription(" CacheMedianSvcTable ")
cacheMedianSvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 2, 1)).setIndexNames((0, "SQUID-MIB", "cacheMedianTime"))
if mibBuilder.loadTexts: cacheMedianSvcEntry.setDescription(" An entry in cacheMedianSvcTable ")
cacheMedianTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMedianTime.setDescription(" The value used to index the table 1/5/60")
cacheHttpAllSvcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHttpAllSvcTime.setDescription(" HTTP all service time ")
cacheHttpMissSvcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHttpMissSvcTime.setDescription(" HTTP miss service time ")
cacheHttpNmSvcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHttpNmSvcTime.setDescription(" HTTP near miss service time ")
cacheHttpHitSvcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHttpHitSvcTime.setDescription(" HTTP hit service time ")
cacheIcpQuerySvcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheIcpQuerySvcTime.setDescription(" ICP query service time ")
cacheIcpReplySvcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheIcpReplySvcTime.setDescription(" ICP reply service time ")
cacheDnsSvcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDnsSvcTime.setDescription(" DNS service time ")
cacheRequestHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheRequestHitRatio.setDescription(" Request Hit Ratios ")
cacheRequestByteRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheRequestByteRatio.setDescription(" Byte Hit Ratios ")
cacheNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 3495, 1, 4))
cacheIpCache = MibIdentifier((1, 3, 6, 1, 4, 1, 3495, 1, 4, 1))
cacheIpEntries = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheIpEntries.setDescription(" IP Cache Entries ")
cacheIpRequests = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheIpRequests.setDescription(" Number of IP Cache requests ")
cacheIpHits = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheIpHits.setDescription(" Number of IP Cache hits ")
cacheIpPendingHits = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheIpPendingHits.setDescription(" Number of IP Cache pending hits ")
cacheIpNegativeHits = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheIpNegativeHits.setDescription(" Number of IP Cache negative hits ")
cacheIpMisses = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheIpMisses.setDescription(" Number of IP Cache misses ")
cacheBlockingGetHostByName = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBlockingGetHostByName.setDescription(" Number of blocking gethostbyname requests ")
cacheAttemptReleaseLckEntries = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheAttemptReleaseLckEntries.setDescription(" Number of attempts to release locked IP Cache entries ")
cacheFqdnCache = MibIdentifier((1, 3, 6, 1, 4, 1, 3495, 1, 4, 2))
cacheFqdnEntries = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheFqdnEntries.setDescription(" FQDN Cache entries ")
cacheFqdnRequests = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheFqdnRequests.setDescription(" Number of FQDN Cache requests ")
cacheFqdnHits = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheFqdnHits.setDescription(" Number of FQDN Cache hits ")
cacheFqdnPendingHits = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheFqdnPendingHits.setDescription(" Number of FQDN Cache pending hits ")
cacheFqdnNegativeHits = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheFqdnNegativeHits.setDescription(" Number of FQDN Cache negative hits ")
cacheFqdnMisses = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheFqdnMisses.setDescription(" Number of FQDN Cache misses ")
cacheBlockingGetHostByAddr = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBlockingGetHostByAddr.setDescription(" Number of blocking gethostbyaddr requests ")
cacheDns = MibIdentifier((1, 3, 6, 1, 4, 1, 3495, 1, 4, 3))
cacheDnsRequests = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDnsRequests.setDescription(" Number of external dnsserver requests ")
cacheDnsReplies = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDnsReplies.setDescription(" Number of external dnsserver replies ")
cacheDnsNumberServers = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDnsNumberServers.setDescription(" Number of external dnsserver processes ")
cacheMesh = MibIdentifier((1, 3, 6, 1, 4, 1, 3495, 1, 5))
cachePeerTable = MibTable((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1))
if mibBuilder.loadTexts: cachePeerTable.setDescription(" This table contains an enumeration of\nthe peer caches, complete with info ")
cachePeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 1)).setIndexNames((0, "SQUID-MIB", "cachePeerAddr"))
if mibBuilder.loadTexts: cachePeerEntry.setDescription(" An entry in cachePeerTable ")
cachePeerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePeerName.setDescription(" The FQDN name or internal alias for the\npeer cache ")
cachePeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePeerAddr.setDescription(" The IP Address of the peer cache ")
cachePeerPortHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePeerPortHttp.setDescription(" The port the peer listens for HTTP requests ")
cachePeerPortIcp = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePeerPortIcp.setDescription(" The port the peer listens for ICP requests\nshould be 0 if not configured to send ICP requests ")
cachePeerType = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 1, 5), Integer32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cachePeerType.setDescription(" Peer Type ")
cachePeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePeerState.setDescription(" The operational state of this peer ")
cachePeerPingsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePeerPingsSent.setDescription(" Number of pings sent to peer ")
cachePeerPingsAcked = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePeerPingsAcked.setDescription(" Number of pings received from peer ")
cachePeerFetches = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePeerFetches.setDescription(" Number of times this peer was selected  ")
cachePeerRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePeerRtt.setDescription(" Last known round-trip time to the peer (in ms) ")
cachePeerIgnored = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePeerIgnored.setDescription(" How many times this peer was ignored ")
cachePeerKeepAlSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePeerKeepAlSent.setDescription(" Number of keepalives sent ")
cachePeerKeepAlRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePeerKeepAlRecv.setDescription(" Number of keepalives received ")
cacheClientTable = MibTable((1, 3, 6, 1, 4, 1, 3495, 1, 5, 2))
if mibBuilder.loadTexts: cacheClientTable.setDescription("A list of cache client entries.")
cacheClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3495, 1, 5, 2, 1)).setIndexNames((0, "SQUID-MIB", "cacheClientAddr"))
if mibBuilder.loadTexts: cacheClientEntry.setDescription("An entry in cacheClientTable ")
cacheClientAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientAddr.setDescription("The client's IP address ")
cacheClientHttpRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientHttpRequests.setDescription(" Number of HTTP requests received from client ")
cacheClientHttpKb = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientHttpKb.setDescription(" Amount of total HTTP traffic to this client  ")
cacheClientHttpHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientHttpHits.setDescription(" Number of hits in response to this client's HTTP requests ")
cacheClientHTTPHitKb = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientHTTPHitKb.setDescription(" Amount of HTTP hit traffic in KB ")
cacheClientIcpRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientIcpRequests.setDescription(" Number of ICP requests received from client ")
cacheClientIcpKb = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientIcpKb.setDescription(" Amount of total ICP traffic to this client (child) ")
cacheClientIcpHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientIcpHits.setDescription(" Number of hits in response to this client's ICP requests ")
cacheClientIcpHitKb = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientIcpHitKb.setDescription(" Amount of ICP hit traffic in KB ")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("SQUID-MIB", PYSNMP_MODULE_ID=squid)

# Objects
mibBuilder.exportSymbols("SQUID-MIB", nlanr=nlanr, squid=squid, cacheSystem=cacheSystem, cacheSysVMsize=cacheSysVMsize, cacheSysStorage=cacheSysStorage, cacheUptime=cacheUptime, cacheConfig=cacheConfig, cacheAdmin=cacheAdmin, cacheSoftware=cacheSoftware, cacheVersionId=cacheVersionId, cacheLoggingFacility=cacheLoggingFacility, cacheStorageConfig=cacheStorageConfig, cacheMemMaxSize=cacheMemMaxSize, cacheSwapMaxSize=cacheSwapMaxSize, cacheSwapHighWM=cacheSwapHighWM, cacheSwapLowWM=cacheSwapLowWM, cachePerf=cachePerf, cacheSysPerf=cacheSysPerf, cacheSysPageFaults=cacheSysPageFaults, cacheSysNumReads=cacheSysNumReads, cacheMemUsage=cacheMemUsage, cacheCpuTime=cacheCpuTime, cacheCpuUsage=cacheCpuUsage, cacheMaxResSize=cacheMaxResSize, cacheNumObjCount=cacheNumObjCount, cacheCurrentLRUExpiration=cacheCurrentLRUExpiration, cacheCurrentUnlinkRequests=cacheCurrentUnlinkRequests, cacheCurrentUnusedFDescrCnt=cacheCurrentUnusedFDescrCnt, cacheCurrentResFileDescrCnt=cacheCurrentResFileDescrCnt, cacheProtoStats=cacheProtoStats, cacheProtoAggregateStats=cacheProtoAggregateStats, cacheProtoClientHttpRequests=cacheProtoClientHttpRequests, cacheHttpHits=cacheHttpHits, cacheHttpErrors=cacheHttpErrors, cacheHttpInKb=cacheHttpInKb, cacheHttpOutKb=cacheHttpOutKb, cacheIcpPktsSent=cacheIcpPktsSent, cacheIcpPktsRecv=cacheIcpPktsRecv, cacheIcpKbSent=cacheIcpKbSent, cacheIcpKbRecv=cacheIcpKbRecv, cacheServerRequests=cacheServerRequests, cacheServerErrors=cacheServerErrors, cacheServerInKb=cacheServerInKb, cacheServerOutKb=cacheServerOutKb, cacheCurrentSwapSize=cacheCurrentSwapSize, cacheClients=cacheClients, cacheMedianSvcTable=cacheMedianSvcTable, cacheMedianSvcEntry=cacheMedianSvcEntry, cacheMedianTime=cacheMedianTime, cacheHttpAllSvcTime=cacheHttpAllSvcTime, cacheHttpMissSvcTime=cacheHttpMissSvcTime, cacheHttpNmSvcTime=cacheHttpNmSvcTime, cacheHttpHitSvcTime=cacheHttpHitSvcTime, cacheIcpQuerySvcTime=cacheIcpQuerySvcTime, cacheIcpReplySvcTime=cacheIcpReplySvcTime, cacheDnsSvcTime=cacheDnsSvcTime, cacheRequestHitRatio=cacheRequestHitRatio, cacheRequestByteRatio=cacheRequestByteRatio, cacheNetwork=cacheNetwork, cacheIpCache=cacheIpCache, cacheIpEntries=cacheIpEntries, cacheIpRequests=cacheIpRequests, cacheIpHits=cacheIpHits, cacheIpPendingHits=cacheIpPendingHits, cacheIpNegativeHits=cacheIpNegativeHits, cacheIpMisses=cacheIpMisses, cacheBlockingGetHostByName=cacheBlockingGetHostByName, cacheAttemptReleaseLckEntries=cacheAttemptReleaseLckEntries, cacheFqdnCache=cacheFqdnCache, cacheFqdnEntries=cacheFqdnEntries, cacheFqdnRequests=cacheFqdnRequests, cacheFqdnHits=cacheFqdnHits, cacheFqdnPendingHits=cacheFqdnPendingHits, cacheFqdnNegativeHits=cacheFqdnNegativeHits, cacheFqdnMisses=cacheFqdnMisses, cacheBlockingGetHostByAddr=cacheBlockingGetHostByAddr, cacheDns=cacheDns, cacheDnsRequests=cacheDnsRequests, cacheDnsReplies=cacheDnsReplies, cacheDnsNumberServers=cacheDnsNumberServers, cacheMesh=cacheMesh, cachePeerTable=cachePeerTable, cachePeerEntry=cachePeerEntry, cachePeerName=cachePeerName, cachePeerAddr=cachePeerAddr, cachePeerPortHttp=cachePeerPortHttp, cachePeerPortIcp=cachePeerPortIcp, cachePeerType=cachePeerType, cachePeerState=cachePeerState, cachePeerPingsSent=cachePeerPingsSent, cachePeerPingsAcked=cachePeerPingsAcked, cachePeerFetches=cachePeerFetches, cachePeerRtt=cachePeerRtt, cachePeerIgnored=cachePeerIgnored, cachePeerKeepAlSent=cachePeerKeepAlSent, cachePeerKeepAlRecv=cachePeerKeepAlRecv, cacheClientTable=cacheClientTable, cacheClientEntry=cacheClientEntry, cacheClientAddr=cacheClientAddr, cacheClientHttpRequests=cacheClientHttpRequests, cacheClientHttpKb=cacheClientHttpKb, cacheClientHttpHits=cacheClientHttpHits, cacheClientHTTPHitKb=cacheClientHTTPHitKb, cacheClientIcpRequests=cacheClientIcpRequests, cacheClientIcpKb=cacheClientIcpKb, cacheClientIcpHits=cacheClientIcpHits, cacheClientIcpHitKb=cacheClientIcpHitKb)

